#allRel[k] = badject[[1]]$Runoff$metrics$allData$PQQ_alpha2
perc.output = perc.metric(badject=badject,byq=0.05)
highRel[k] = perc.output$reliability[20]
print(paste("now on catchment #",k,", ",catchmentList[k],sep=""))
}
rank = highRel-allRel
x = data.frame(catchmentList,rank)
y = x[order(x[[2]]),]
catchment.ranked=y[[1]]
for(k in 1:z) {
#load(paste(dataloc,catchment.ranked[k],"_BC02NSE_BC02_zero.bad.RData",sep="")) # loading this catchment specifically
load(paste(dataloc,catchmentList[k],"_BC02NSE_BC02_zero.bad.RData",sep="")) # loading this catchment specifically
#########################################
## creating data structures for high flows and all flows
pred = badject[[1]]$Runoff$calibration$pred.calib
obs = badject[[1]]$Runoff$obs
reps = badject[[1]]$Runoff$calibration$reps.calib
pred95 = quantile(x=pred,probs=c(0.95))[[1]]
#pred99 = quantile(x=pred,probs=c(0.99))[[1]]
z=length(pred)
hiobs = rep(NA,z)
hipred = rep(NA,z)
hireps = matrix(nrow=z,ncol=100)
for(i in 1:z) {
if(pred[i]>=pred95) {
hiobs[i] = obs[i]
hipred[i] = pred[i]
hireps[i,] = reps[i,]
}
}
lam=0.2
# transformed items
obs.tranz = ((obs^lam)-1)/lam
pred.tranz = ((pred^lam)-1)/lam
resid.tranz = obs.tranz-pred.tranz
# transformed high flows
hiobs.tranz = ((hiobs^lam)-1)/lam
hipred.tranz = ((hipred^lam)-1)/lam
hiresid.tranz = hiobs.tranz-hipred.tranz
#########################################
## PQQ plots
# all flows
#plot.predictiveQQ(obs=obs,pred.reps=reps,perturb=T,add.indices=F,add.grid=F,xaxt="n",yaxt="n")
#legend(x="topleft",legend=c(paste(catchment[k]," all flows",sep="")))
# high 5% flows
plot.predictiveQQ(obs=hiobs,pred.reps=hireps,perturb=T,add.indices=F,add.grid=F,xaxt="n",yaxt="n")
#legend(x="topleft",legend=c(paste(catchment[k]," high 5% flows",sep="")))
legend(x="topleft",legend=c(paste(catchmentList[k],sep="")))
#if(k==1) {
#   mtext(side=1,line=1,text=c("Theoretical Quantile of U[0,1]"),outer=T,cex=1.2)
#   mtext(side=2,line=1,text=c("Quantile of observed p-value"),outer=T,cex=1.2)
#}
#########################################
#########################################
## Density plots
# all flows
#plot.residuals.density(residuals=resid.tranz,col="red",add.stats=F,main="")
#legend(x="topright",legend=paste(catchment[k]," all flows"))
# high flows
#plot.residuals.density(residuals=hiresid.tranz,col="red",add.stats=F,main="")
#legend(x="topright",legend=paste(catchment[k]," top 5% flows"))
#########################################
}
#########################################
#########################################
## Draw ranked errors vs. PQQ category
# par(mfrow=c(1,1),oma=c(4,3,1,1))
#
# catRank = read.csv(paste(inloc2,"catchmentRank.csv",sep=""))
#
# plot(x=seq(from=1,to=54,by=1),y=catRank$category,type="b",yaxt="n",xaxt="n")
# axis(side=1,at=seq(from=1,to=54,by=1),labels=catchment.ranked,las=2)
# axis(side=2,at=seq(from=1,to=5,by=1),labels=c("1.overestimation","2.underestimation","3.","4.","5.good"))
#########################################
## Draws comparitive diagnostics for allFlows and highFlows (top 5%)
#########################################
#########################################
## Inputs
# Sourcing
codeloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/2_figures/"
dataloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/8_Data_External/p1_badject_forp2/"
outloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/1_figures/temp/"
inloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/inputs/"
#inloc2 = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/2_figures/output/"
source(paste(codeloc,"boxplot.ext_DM.R",sep=""))
source(paste(codeloc,"calcMetrics.R",sep=""))
source(paste(codeloc,"plot.predictiveQQ.R",sep=""))
source(paste(codeloc,"plot.problim.R",sep=""))
source(paste(codeloc,"aux_quantileMetric.R",sep=""))
source(paste(codeloc,"plot.residuals.multi.R",sep=""))
#########################################
par(mfrow=c(5,4),mar=c(1,1,1,1),oma=c(3,3,1,2))
#par(mfrow=c(5,2),mar=c(1,1,1,1),oma=c(3,3,1,1))
#catchment=c("219001","222213","401217","401203","405251")
no.catchment=54
###########################
## Selecting which catchments to use
classList = read.csv(paste(inloc,"catchmentRank.csv",sep=""))
catchmentList = vector(length = no.catchment)
x = vector(length = no.catchment)
PQQtype = 3 # 1 = overestimation, 2 = underestimation, 3 = overestimation of uncertainty, 4 = underestimation of uncertainty, 5 = perfect.
for(i in 1:length(classList[[1]])) {
if(classList[[2]][i]==PQQtype) {
x[i] = as.character(classList[[1]][i])
}
}
catchmentList = x[x!="FALSE"]
z = length(catchmentList)
# BookofNames = read.csv(paste(inloc,"BookofNames_p1.csv",sep=""),header=T, as.is=T)
# catchment = BookofNames$NamesAll
# z = length(catchment)
allRel=vector(length=z)
highRel = vector(length=z)
# saving high-flow reliability
# load(paste(inloc2,"percentile_reli_zero.RData",sep=""))
# highRel = perc.box.reli[,20]
## ranking by reliability error
for (k in 1:z) {
load(paste(dataloc,catchmentList[k],"_BC02NSE_BC02_zero.bad.RData",sep="")) # loading this catchment specifically
allRel[k] = 1-PQQ_alpha(obs=badject[[1]]$Runoff$obs,pred.reps=badject[[1]]$Runoff$calibration$reps.calib)
#allRel[k] = badject[[1]]$Runoff$metrics$allData$PQQ_alpha2
perc.output = perc.metric(badject=badject,byq=0.05)
highRel[k] = perc.output$reliability[20]
print(paste("now on catchment #",k,", ",catchmentList[k],sep=""))
}
rank = highRel-allRel
x = data.frame(catchmentList,rank)
y = x[order(x[[2]]),]
catchment.ranked=y[[1]]
for(k in 1:z) {
#load(paste(dataloc,catchment.ranked[k],"_BC02NSE_BC02_zero.bad.RData",sep="")) # loading this catchment specifically
load(paste(dataloc,catchmentList[k],"_BC02NSE_BC02_zero.bad.RData",sep="")) # loading this catchment specifically
#########################################
## creating data structures for high flows and all flows
pred = badject[[1]]$Runoff$calibration$pred.calib
obs = badject[[1]]$Runoff$obs
reps = badject[[1]]$Runoff$calibration$reps.calib
pred95 = quantile(x=pred,probs=c(0.95))[[1]]
#pred99 = quantile(x=pred,probs=c(0.99))[[1]]
z=length(pred)
hiobs = rep(NA,z)
hipred = rep(NA,z)
hireps = matrix(nrow=z,ncol=100)
for(i in 1:z) {
if(pred[i]>=pred95) {
hiobs[i] = obs[i]
hipred[i] = pred[i]
hireps[i,] = reps[i,]
}
}
lam=0.2
# transformed items
obs.tranz = ((obs^lam)-1)/lam
pred.tranz = ((pred^lam)-1)/lam
resid.tranz = obs.tranz-pred.tranz
# transformed high flows
hiobs.tranz = ((hiobs^lam)-1)/lam
hipred.tranz = ((hipred^lam)-1)/lam
hiresid.tranz = hiobs.tranz-hipred.tranz
#########################################
## PQQ plots
# all flows
plot.predictiveQQ(obs=obs,pred.reps=reps,perturb=T,add.indices=F,add.grid=F,xaxt="n",yaxt="n")
#legend(x="topleft",legend=c(paste(catchment[k]," all flows",sep="")))
# high 5% flows
#plot.predictiveQQ(obs=hiobs,pred.reps=hireps,perturb=T,add.indices=F,add.grid=F,xaxt="n",yaxt="n")
#legend(x="topleft",legend=c(paste(catchment[k]," high 5% flows",sep="")))
legend(x="topleft",legend=c(paste(catchmentList[k],sep="")))
#if(k==1) {
#   mtext(side=1,line=1,text=c("Theoretical Quantile of U[0,1]"),outer=T,cex=1.2)
#   mtext(side=2,line=1,text=c("Quantile of observed p-value"),outer=T,cex=1.2)
#}
#########################################
#########################################
## Density plots
# all flows
#plot.residuals.density(residuals=resid.tranz,col="red",add.stats=F,main="")
#legend(x="topright",legend=paste(catchment[k]," all flows"))
# high flows
#plot.residuals.density(residuals=hiresid.tranz,col="red",add.stats=F,main="")
#legend(x="topright",legend=paste(catchment[k]," top 5% flows"))
#########################################
}
#########################################
#########################################
## Draw ranked errors vs. PQQ category
# par(mfrow=c(1,1),oma=c(4,3,1,1))
#
# catRank = read.csv(paste(inloc2,"catchmentRank.csv",sep=""))
#
# plot(x=seq(from=1,to=54,by=1),y=catRank$category,type="b",yaxt="n",xaxt="n")
# axis(side=1,at=seq(from=1,to=54,by=1),labels=catchment.ranked,las=2)
# axis(side=2,at=seq(from=1,to=5,by=1),labels=c("1.overestimation","2.underestimation","3.","4.","5.good"))
badject[[1]]$Runoff$metrics$allFlows$percentile.reps.rel.med
##################################
## Compares 5% high-flow data from two sources
#########################################
# Sourcing
codeloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/2_figures/"
dataloc_A = "C:/Users/Console/Box/2018_PHD_JasonHunter/8_Data_External/p1_badject_forp2/"
dataloc_B = "C:/Users/Console/Box/2018_PHD_JasonHunter/8_Data_External/p2_bad_objects_BC02_54catchments_splitCalibAll/" # use the paper 1 bad objects - more OFs, less lambdas  p2_censoredExtreme
dataloc_C = "C:/Users/Console/Box/2018_PHD_JasonHunter/8_Data_External/p2_bad_objects_BC02_54catchments_splitCalibresid/"
outloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/2_figures/output/"
inloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/inputs/"
source(paste(codeloc,"boxplot.ext_DM.R",sep=""))
source(paste(codeloc,"calcMetrics.R",sep=""))
source(paste(codeloc,"plot.predictiveQQ.R",sep=""))
source(paste(codeloc,"plot.problim.R",sep=""))
source(paste(codeloc,"aux_quantileMetric.R",sep=""))
###########################
## Setting up inputs
no.catchment=54
nreps=100
size.strat = 20 # 5% flows
dataloc = c("dataloc_A","dataloc_A","dataloc_A","dataloc_B","dataloc_C")
objSelect = c("BC02NSE","BC02NSE","logNSE","BC02NSE","BC02NSE")
###########################
## Selecting which catchments to use
classList = read.csv(paste(inloc,"catchmentRank.csv",sep=""))
catchmentList = vector(length = no.catchment)
x = vector(length = no.catchment)
PQQtype = 3 # 1 = overestimation, 2 = underestimation, 3 = overestimation of uncertainty, 4 = underestimation of uncertainty, 5 = perfect.
for(i in 1:length(classList[[1]])) {
if(classList[[2]][i]==PQQtype) {
x[i] = as.character(classList[[1]][i])
}
}
catchmentList = x[x!="FALSE"]
clen = length(catchmentList)
###########################
## Building top 5% vectors
lc = length(dataloc)
perc.box.reli=matrix(nrow=clen,ncol=lc)
perc.box.prec=matrix(nrow=clen,ncol=lc)
perc.box.bias=matrix(nrow=clen,ncol=lc)
perc.box.volf=matrix(nrow=clen,ncol=lc)
perc.box.perc=matrix(nrow=clen,ncol=lc)
for(j in 1:length(dataloc)) {
countBox = 1
files = list.files(path=get(dataloc[j]),pattern="*.RData")
z = length(files) # number of badjects in the data folder
for (i in 1:z) {
load(paste(get(dataloc[j]),files[i],sep=""))
meantype = badject[[1]]$Runoff$attributes$meantype
objFunc = badject[[1]]$Runoff$attributes$objFunc
cname = badject[[1]]$Runoff$obs.name
if(cname %in% catchmentList) {
if(meantype=="zero") { # don't use linear
if(objFunc==objSelect[j]) { # BC02NSE or logNSE
if(j==1) { # do all flows for comparison
perc.box.reli[countBox,j]=badject[[1]]$Runoff$metrics$allFlows$PQQ_alpha2
perc.box.prec[countBox,j]=badject[[1]]$Runoff$metrics$allFlows$precision
perc.box.bias[countBox,j]=badject[[1]]$Runoff$metrics$allFlows$bias.mean.rel.abs
perc.box.perc[countBox,j]=badject[[1]]$Runoff$metrics$allFlows$percentile.reps.rel.med[1]
} else {
perc.output = perc.metric(badject=badject,byq=(1/size.strat))
perc.box.reli[countBox,j]=perc.output$reliability[size.strat]
perc.box.prec[countBox,j]=perc.output$precision[size.strat]
perc.box.bias[countBox,j]=perc.output$bias[size.strat]
perc.box.perc[countBox,j]=perc.output$percentile[size.strat+1]
perc.box.volf[countBox,j]=perc.output$volumeFlow[size.strat]
}
print(paste("Completed catchment number ",countBox," or catchment ",cname,sep=""))
countBox=countBox+1
}
}
}
}
}
perc.box.perc = perc.box.perc*100
###########################
## boxplotting comparisons
par(mfrow=c(2,2),mar=c(1,3,1,1),oma=c(2,2,3,1))
colo=c("grey","red","cyan","green","yellow")
boxplot.ext(xin=perc.box.reli,colouring=colo,xaxt="n",ylim=c(0,0.4))
mtext(side=2,line=2,text=c("Reliability"))
boxplot.ext(xin=perc.box.prec,colouring=colo,xaxt="n")
mtext(side=2,line=2,text=c("Precision"))
boxplot.ext(xin=perc.box.bias,colouring=colo,xaxt="n",ylim=c(0,0.6))
mtext(side=2,line=2,text=c("Bias"))
#axis(side=1,at=c(1,2,3),labels=c("allFlows_BC02NSE","allFlows_logNSE","20%_highFlows_BC02NSE"),las=2)
boxplot.ext(xin=perc.box.perc,colouring=colo,xaxt="n",ylim=c(-20,100))
abline(h=0,lty=2,col="grey")
mtext(side=2,line=2,text=c("Relative error"))
#legend(x="bottomleft",legend=c("consistent BC02NSE (reference)","consistent logNSE","BC02NSE, 15% high-flow calibration (HM & EM params)","BC02NSE OF, 15% high-flow calibration (EM param only)"),fill=colo)
#axis(side=1,at=c(1,2,3),labels=c("allFlows_BC02NSE","allFlows_logNSE","20%_highFlows_BC02NSE"),las=2)
#mtext(side=3,outer=T,line=0,text=c("metrics on 5% quantiles - BC02NSE - 17 catchments w/ uncertainty underestimation"),font=2)
#########################################
View(badject[[1]]$Runoff$pred.reps)
##################################
## Compares 5% high-flow data from two sources
#########################################
# Sourcing
codeloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/2_figures/"
dataloc_A = "C:/Users/Console/Box/2018_PHD_JasonHunter/8_Data_External/p1_badject_forp2/"
dataloc_B = "C:/Users/Console/Box/2018_PHD_JasonHunter/8_Data_External/p2_bad_objects_BC02_54catchments_splitCalibAll/" # use the paper 1 bad objects - more OFs, less lambdas  p2_censoredExtreme
dataloc_C = "C:/Users/Console/Box/2018_PHD_JasonHunter/8_Data_External/p2_bad_objects_BC02_54catchments_splitCalibresid/"
outloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/2_figures/output/"
inloc = "C:/Users/Console/Box/2018_PHD_JasonHunter/3_Tasks/inputs/"
source(paste(codeloc,"boxplot.ext_DM.R",sep=""))
source(paste(codeloc,"calcMetrics.R",sep=""))
source(paste(codeloc,"plot.predictiveQQ.R",sep=""))
source(paste(codeloc,"plot.problim.R",sep=""))
source(paste(codeloc,"aux_quantileMetric.R",sep=""))
###########################
## Setting up inputs
no.catchment=54
nreps=100
size.strat = 20 # 5% flows
dataloc = c("dataloc_A","dataloc_A","dataloc_A","dataloc_B","dataloc_C")
objSelect = c("BC02NSE","BC02NSE","logNSE","BC02NSE","BC02NSE")
###########################
## Selecting which catchments to use
classList = read.csv(paste(inloc,"catchmentRank.csv",sep=""))
catchmentList = vector(length = no.catchment)
x = vector(length = no.catchment)
PQQtype = 3 # 1 = overestimation, 2 = underestimation, 3 = overestimation of uncertainty, 4 = underestimation of uncertainty, 5 = perfect.
for(i in 1:length(classList[[1]])) {
if(classList[[2]][i]==PQQtype) {
x[i] = as.character(classList[[1]][i])
}
}
catchmentList = x[x!="FALSE"]
clen = length(catchmentList)
###########################
## Building top 5% vectors
lc = length(dataloc)
perc.box.reli=matrix(nrow=clen,ncol=lc)
perc.box.prec=matrix(nrow=clen,ncol=lc)
perc.box.bias=matrix(nrow=clen,ncol=lc)
perc.box.volf=matrix(nrow=clen,ncol=lc)
perc.box.perc=matrix(nrow=clen,ncol=lc)
for(j in 1:length(dataloc)) {
countBox = 1
files = list.files(path=get(dataloc[j]),pattern="*.RData")
z = length(files) # number of badjects in the data folder
for (i in 1:z) {
load(paste(get(dataloc[j]),files[i],sep=""))
meantype = badject[[1]]$Runoff$attributes$meantype
objFunc = badject[[1]]$Runoff$attributes$objFunc
cname = badject[[1]]$Runoff$obs.name
if(cname %in% catchmentList) {
if(meantype=="zero") { # don't use linear
if(objFunc==objSelect[j]) { # BC02NSE or logNSE
if(j==1) { # do all flows for comparison
perc.box.reli[countBox,j]=badject[[1]]$Runoff$metrics$allFlows$PQQ_alpha2
perc.box.prec[countBox,j]=badject[[1]]$Runoff$metrics$allFlows$precision
perc.box.bias[countBox,j]=badject[[1]]$Runoff$metrics$allFlows$bias.mean.rel.abs
perc.box.perc[countBox,j]=badject[[1]]$Runoff$metrics$allFlows$percentile.reps.rel.med[101]
} else {
perc.output = perc.metric(badject=badject,byq=(1/size.strat))
perc.box.reli[countBox,j]=perc.output$reliability[size.strat]
perc.box.prec[countBox,j]=perc.output$precision[size.strat]
perc.box.bias[countBox,j]=perc.output$bias[size.strat]
perc.box.perc[countBox,j]=perc.output$percentile[size.strat+1]
perc.box.volf[countBox,j]=perc.output$volumeFlow[size.strat]
}
print(paste("Completed catchment number ",countBox," or catchment ",cname,sep=""))
countBox=countBox+1
}
}
}
}
}
perc.box.perc = perc.box.perc*100
###########################
## boxplotting comparisons
par(mfrow=c(2,2),mar=c(1,3,1,1),oma=c(2,2,3,1))
colo=c("grey","red","cyan","green","yellow")
boxplot.ext(xin=perc.box.reli,colouring=colo,xaxt="n",ylim=c(0,0.4))
mtext(side=2,line=2,text=c("Reliability"))
boxplot.ext(xin=perc.box.prec,colouring=colo,xaxt="n")
mtext(side=2,line=2,text=c("Precision"))
boxplot.ext(xin=perc.box.bias,colouring=colo,xaxt="n",ylim=c(0,0.6))
mtext(side=2,line=2,text=c("Bias"))
#axis(side=1,at=c(1,2,3),labels=c("allFlows_BC02NSE","allFlows_logNSE","20%_highFlows_BC02NSE"),las=2)
boxplot.ext(xin=perc.box.perc,colouring=colo,xaxt="n",ylim=c(-20,100))
abline(h=0,lty=2,col="grey")
mtext(side=2,line=2,text=c("Relative error"))
#legend(x="bottomleft",legend=c("consistent BC02NSE (reference)","consistent logNSE","BC02NSE, 15% high-flow calibration (HM & EM params)","BC02NSE OF, 15% high-flow calibration (EM param only)"),fill=colo)
#axis(side=1,at=c(1,2,3),labels=c("allFlows_BC02NSE","allFlows_logNSE","20%_highFlows_BC02NSE"),las=2)
#mtext(side=3,outer=T,line=0,text=c("metrics on 5% quantiles - BC02NSE - 17 catchments w/ uncertainty underestimation"),font=2)
#########################################
#homeloc = "C:/Users/Terminal/Desktop/R/prototype" # laptop
#homeloc = "F:/project_DEW/prototype" # desktop
dirname = "C:/Users/Console/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # desktop
#dirname = "C:/Users/Terminal/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # laptop
################################################
library(devtools)  # builds the package
library(roxygen2)  # simplifies writing the documentation
#Creates the package.  an R-project is generated into which all the scripts should be linked
##DONT RUN THESE TWO LINES MORE THAN ONCE ELSE IT WILL OVERWRITE THE EXISTING PACKAGE ##
# setwd(dirname)
# create("package")
# builds the package
#install the package for testing
#setwd(dirname)
#install("package")
#install.packages("shiny",lib="G:/Programs/R4_4/R-4.0.4/library")
#install.packages("shinythemes",lib="G:/Programs/R4_4/R-4.0.4/library")
install.packages("moments",lib="G:/Programs/R4_4/R-4.0.4/library")
install.packages(pkgs="C:/Users/Console/Box/Task1_1_PrototypeSoftware/Probabilistic_App/ProbPred_1.0.tar.gz",type = "source",repos=NULL,lib="G:/Programs/R4_4/R-4.0.4/library")
#install.packages("C:/Users/Terminal/Box/Task1_1_PrototypeSoftware/Probabilistic_App/ProbPred_1.0.tar.gz", repos = NULL, type = "source", lib="C:/Users/Terminal/Documents/R/win-library/4.0")
library(ProbPred,lib.loc="G:/Programs/R4_4/R-4.0.4/library")
## Loads the webapp
?probModInteractive
probModInteractive()
#homeloc = "C:/Users/Terminal/Desktop/R/prototype" # laptop
#homeloc = "F:/project_DEW/prototype" # desktop
dirname = "C:/Users/Console/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # desktop
#dirname = "C:/Users/Terminal/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # laptop
################################################
library(devtools)  # builds the package
library(roxygen2)  # simplifies writing the documentation
#Creates the package.  an R-project is generated into which all the scripts should be linked
##DONT RUN THESE TWO LINES MORE THAN ONCE ELSE IT WILL OVERWRITE THE EXISTING PACKAGE ##
# setwd(dirname)
# create("package")
# builds the package
#Updates documentation changes only#Sys.setenv(BINPREF = "G:/Programs/R/RTools/Rtools/mingw_$(WIN)/bin/")
Sys.setenv(BINPREF = "G:/Programs/R2020/RTools/rtools40/mingw_$(WIN)/bin/")
Sys.setenv(PATH = paste("G:/Programs/R2020/RTools/rtools40/mingw_$(WIN)/bin/","G:/Programs/R2020/RTools/rtools40/",Sys.getenv("PATH"),sep=";"))
Sys.setenv(RTOOLS40_HOME="G:/Programs/R2020/RTools/rtools40")
build(paste(dirname,"package",sep=""),vignettes=F)
remove.packages("ProbPred")
#install the package for testing
#setwd(dirname)
#install("package")
#install.packages("shiny",lib="G:/Programs/R4_4/R-4.0.4/library")
#install.packages("shinythemes",lib="G:/Programs/R4_4/R-4.0.4/library")
install.packages("moments",lib="G:/Programs/R4_4/R-4.0.4/library")
install.packages(pkgs="C:/Users/Console/Box/Task1_1_PrototypeSoftware/Probabilistic_App/ProbPred_1.0.tar.gz",type = "source",repos=NULL,lib="G:/Programs/R4_4/R-4.0.4/library")
#install.packages("C:/Users/Terminal/Box/Task1_1_PrototypeSoftware/Probabilistic_App/ProbPred_1.0.tar.gz", repos = NULL, type = "source", lib="C:/Users/Terminal/Documents/R/win-library/4.0")
library(ProbPred,lib.loc="G:/Programs/R4_4/R-4.0.4/library")
## Loads the webapp
?probModInteractive
probModInteractive()
#homeloc = "C:/Users/Terminal/Desktop/R/prototype" # laptop
#homeloc = "F:/project_DEW/prototype" # desktop
dirname = "C:/Users/Console/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # desktop
#dirname = "C:/Users/Terminal/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # laptop
################################################
library(devtools)  # builds the package
library(roxygen2)  # simplifies writing the documentation
#Creates the package.  an R-project is generated into which all the scripts should be linked
##DONT RUN THESE TWO LINES MORE THAN ONCE ELSE IT WILL OVERWRITE THE EXISTING PACKAGE ##
# setwd(dirname)
# create("package")
# builds the package
#Updates documentation changes only#Sys.setenv(BINPREF = "G:/Programs/R/RTools/Rtools/mingw_$(WIN)/bin/")
Sys.setenv(BINPREF = "G:/Programs/R2020/RTools/rtools40/mingw_$(WIN)/bin/")
Sys.setenv(PATH = paste("G:/Programs/R2020/RTools/rtools40/mingw_$(WIN)/bin/","G:/Programs/R2020/RTools/rtools40/",Sys.getenv("PATH"),sep=";"))
Sys.setenv(RTOOLS40_HOME="G:/Programs/R2020/RTools/rtools40")
build(paste(dirname,"package",sep=""),vignettes=F)
#homeloc = "C:/Users/Terminal/Desktop/R/prototype" # laptop
#homeloc = "F:/project_DEW/prototype" # desktop
dirname = "C:/Users/Console/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # desktop
#dirname = "C:/Users/Terminal/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # laptop
################################################
library(devtools)  # builds the package
library(roxygen2)  # simplifies writing the documentation
#Creates the package.
#install.packages("shiny",lib="G:/Programs/R4_4/R-4.0.4/library")
#install.packages("shinythemes",lib="G:/Programs/R4_4/R-4.0.4/library")
install.packages("moments",lib="G:/Programs/R4_4/R-4.0.4/library")
install.packages(pkgs="C:/Users/Console/Box/Task1_1_PrototypeSoftware/Probabilistic_App/ProbPred_1.0.tar.gz",type = "source",repos=NULL,lib="G:/Programs/R4_4/R-4.0.4/library")
#install.packages("C:/Users/Terminal/Box/Task1_1_PrototypeSoftware/Probabilistic_App/ProbPred_1.0.tar.gz", repos = NULL, type = "source", lib="C:/Users/Terminal/Documents/R/win-library/4.0")
library(ProbPred,lib.loc="G:/Programs/R4_4/R-4.0.4/library")
data_dirname = paste(dirname,'data/',sep='')
RData_fname = "402204_SLS.csv" # Yackandandah Creek
data1 = read.csv(paste(data_dirname,RData_fname,sep=""),as.is=T)
opt = list(reps=100,
dirname = dirname,
title = "replicate",
obs = "obs", # column  of the observed data
pred = "pred", #4,# data  of the predicted data
date = "date", #2,# data of the dates
lambda = 0.2,
A = 0.,
meantype = "linear",
inputName = RData_fname,
unit="mmd",
repPrint=T,
plPrint=T,
#        useExampleData=T,
libPath = .libPaths()
)
probabilisticMod(data=data1,
opt=opt)
?probabilisticMod
?HTML
?<a
?href
?helpText
?text
#homeloc = "C:/Users/Terminal/Desktop/R/prototype" # laptop
#homeloc = "F:/project_DEW/prototype" # desktop
dirname = "C:/Users/Console/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # desktop
#dirname = "C:/Users/Terminal/Box/Task1_1_PrototypeSoftware/Probabilistic_App/" # laptop
################################################
library(devtools)  # builds the package
library(roxygen2)  # simplifies writing the documentation
#Creates the package.  an R-project is generated into which all the scripts should be linked
##DONT RUN THESE TWO LINES MORE THAN ONCE ELSE IT WILL OVERWRITE THE EXISTING PACKAGE ##
# setwd(dirname)
# create("package")
# builds the package
#Updates documentation changes only#Sys.setenv(BINPREF = "G:/Programs/R/RTools/Rtools/mingw_$(WIN)/bin/")
Sys.setenv(BINPREF = "G:/Programs/R2020/RTools/rtools40/mingw_$(WIN)/bin/")
Sys.setenv(PATH = paste("G:/Programs/R2020/RTools/rtools40/mingw_$(WIN)/bin/","G:/Programs/R2020/RTools/rtools40/",Sys.getenv("PATH"),sep=";"))
Sys.setenv(RTOOLS40_HOME="G:/Programs/R2020/RTools/rtools40")
build(paste(dirname,"package",sep=""),vignettes=F)
